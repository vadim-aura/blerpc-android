import Foundation
import SwiftBleRpcLibrary
import AURACommonProto

/// Extension for {{swiftPackageName}}{{messageName}} which adds encode to Data and decode from Data methods.
extension {{swiftPackageName}}{{messageName}} {
    /// Convert data to {{swiftPackageName}}{{messageName}} proto object.
    /// - parameter data: data which needs to be converted.
    /// - returns: decoded {{swiftPackageName}}{{messageName}} proto.
    static func bleRpcDecode(data: Data) throws -> {{swiftPackageName}}{{messageName}} {
        var proto = {{swiftPackageName}}{{messageName}}()
{{#fields}}
        if data.count > {{fromByte}} {
        {{#isEnum}}
            if data.count >= {{toByte}} {
                proto.{{name}} = try {{swiftPackageName}}{{protoType}}.init(rawValue: Int(SwiftBleRpcLibrary.ProtoDecoder.decode(data: data, from: {{fromByte}}, to: {{toByte}}, type: ProtoType.int32) as! Int32))!
            }
        {{/isEnum}}
        {{#isPrimitiveType}}
            if data.count >= {{toByte}} {
                proto.{{name}} = try SwiftBleRpcLibrary.ProtoDecoder.decode(data: data, from: {{fromByte}}, to: {{toByte}}, type: {{swiftType}}) as! {{type}}
            }
        {{/isPrimitiveType}}
        {{#isProtoObject}}
            proto.{{name}} = try {{swiftPackageName}}{{protoType}}.bleRpcDecode(data: data.subdata(in: {{fromByte}}..<min({{toByte}}, data.count)))
        {{/isProtoObject}}
        }
{{/fields}}
        return proto
    }

    /// Convert {{swiftPackageName}}{{messageName}} proto object to raw data.
    /// - parameter proto: proto object which needs to be converted.
    /// - returns: encoded {{swiftPackageName}}{{messageName}}.
    static func bleRpcEncode(proto: {{swiftPackageName}}{{messageName}}) throws -> Data {
        var data = Data()
{{#fields}}
    {{#isEnum}}
        data.append(try SwiftBleRpcLibrary.ProtoEncoder.encode(object: proto.{{name}}.rawValue, from: {{fromByte}}, to: {{toByte}}, type: {{swiftType}}))
    {{/isEnum}}
    {{#isProtoObject}}
        data.append(try {{swiftPackageName}}{{protoType}}.bleRpcEncode(proto: proto.{{name}}))
    {{/isProtoObject}}
    {{#isPrimitiveType}}
        data.append(try SwiftBleRpcLibrary.ProtoEncoder.encode(object: proto.{{name}}, from: {{fromByte}}, to: {{toByte}}, type: {{swiftType}}))
    {{/isPrimitiveType}}
{{/fields}}
        return data
    }
}
